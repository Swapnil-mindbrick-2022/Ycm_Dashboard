<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" 
	integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
	 integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

	<!-- Add the datatables library CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css">

<!-- Add the jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Add the datatables library JS -->
<script type="text/javascript" src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>

<!-- Add the column filtering plugin JS -->
<script type="text/javascript" src="https://cdn.rawgit.com/rewonc/jquery.dataTables.columnFilter/v1.5.6/dist/jquery.dataTables.columnFilter.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>
<script src="https://code.highcharts.com/themes/high-contrast-light.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>

	<title>Treds</title>

	<style>
 body {
  background: linear-gradient(to bottom right, #2c3e50, #ebefce);
}

		/* Styling for the header */
		#parentele{
			display: flex;
			justify-content: flex-end;
			border: 2px solid yellow;
			height: 580px;
			/* width: 1650px; */
			
		}
		.header {
			background: linear-gradient(to bottom right, #2c3e50, #dda8d4);
			color:black;
			padding: 10px;
			box-sizing: border-box;
			text-align: center;
		}

		/* Styling for the left side navbar */
		.left-nav {
			position: fixed;
			top: 140px;
			left: 0;
			width: 35%;
			height: 78%;
			background-color:white;
			color:black;
			padding: 20px;
			box-sizing: border-box;
			display: flex;
			flex-direction: column;
			justify-content: flex-start;
			align-items: center;
			overflow-y: auto;
			border: 1px solid blue;
			/* border-radius: 10%; */
		}

		/* Styling for the right side navbar */


		/* Styling for the headings in side navbars */
		.left-nav h2
		 {
			margin: 0;
			padding: 10px 0;
			text-align: center;
		}

		/* Styling for the links in side navbars */
		.left-nav ul
		{
			list-style: none;
			margin: 0;
			padding: 0;
			display: flex;
			flex-direction: column;
			align-items: center;
			width: 100%;
		}

		.left-nav li
		 {
			width: 100%;
			margin: 10px 0;
		}

		.left-nav a {
			color: black;
			text-decoration: none;
			width: 100%;
			display: block;
			padding: 10px;
			box-sizing: border-box;
			text-align: center;
			border-radius: 5px;
			transition: background-color 0.3s ease;
		}

		.left-nav a:hover
 {
			background-color: #555;
		}
		#mainele{
			border:2px solid black;
			height: 580px;
			width: 950px;

		}
		    /* Set table width to 100% */
			table {
      width: 100%;
    }

    /* Add some spacing between table cells */
    td, th {
      padding: 8px;
    }

    /* Add some borders to table cells */
    td {
      border: 1px solid #ddd;
    }

    /* Add a gray background color to the header row */
    thead tr {
      background-color: #f1f1f1;
    }

    /* Add a hover effect to table rows */
    tbody tr:hover {
      background-color: #f5f5f5;
    }

    /* Customize pagination buttons */
    .paginate_button {
      background-color: #e7e7e7;
      border: 1px solid #ddd;
      color: black;
      padding: 8px 16px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
    }

    .paginate_button:hover {
      background-color: #ddd;
    }

    .paginate_button.current {
      background-color: #4CAF50;
      color: white;
    }

    /* Customize column filter inputs */
    .dataTables_filter input {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 10px;
    }

    .dataTables_filter input:focus {
      outline: none;
      box-shadow: 0 0 3px #ddd;
    }
	.card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 300px;
  height: 400px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  transition: transform 0.2s ease-in-out;
}

.card:hover {
  transform: scale(1.05);
}

.card img {
  width: 100%;
  height: 60%;
  object-fit: cover;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

.card h2 {
  margin: 20px;
  font-size: 20px;
  font-weight: bold;
}

.card p {
  margin: 0 20px 20px;
  font-size: 16px;
  text-align: justify;
}

/* Mobile Styles */

@media only screen and (max-width: 600px) {
  .card {
    width: 90%;
    height: auto;
  }

  .card img {
    height: 50%;
  }

  .card h2 {
    font-size: 18px;
  }

  .card p {
    font-size: 14px;
  }
}/* Style the table */
table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

/* Style the table headers */
th {
  background-color: #f2f2f2;
  text-align: left;
  padding: 8px;
  font-size: 16px;
}

/* Style the table rows */
tr:nth-child(even) {
  background-color: #f2f2f2;
}

tr:hover {
  background-color: #ddd;
}

/* Style the table cells */
td {
  border: 1px solid #ddd;
  padding: 8px;
}
.box {
  background-color: #f4f0f0;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 10px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  transition: box-shadow 0.3s ease;
  width:400px;
}

.box:hover {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
}

.box h2 {
  margin: 0;
}
.box2 {
  background-color: #f4f0f0;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 10px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  transition: box-shadow 0.3s ease;
  width:800px;
  margin-left: 450px;
}

/*  for chart  */




/* Add media queries for responsive design */
@media only screen and (max-width: 600px) {
  /* Adjust the table layout for small screens */
  table, th, td {
    display: block;
    width: 100%;
  }
  th, td {
    text-align: center;
  }
}
.loader {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 4px solid rgba(0, 0, 0, 0.1);
  border-top-color: #3498db;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


	</style>
</head>
<body>
	<!-- Header -->
	<header class="header">
		<div class="box2">
			<h1>TREND</h1>
		  </div>
	</header>
	<nav style="margin-left: 10rem;" class="top-nav ">
			<button>
				<a href="/homepage">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house-door-fill" viewBox="0 0 16 16">
						<path d="M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5Z"/>
					  </svg>
					</a>
			</button>
      <button>
      <a href="#">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
          <path d="M8 1.5a6.5 6.5 0 1 0 6.5 6.5A6.508 6.508 0 0 0 8 1.5zM8 8a2 2 0 1 1 2-2A2 2 0 0 1 8 8zm4.5 4.5a5.5 5.5 0 0 1-5.5 5.5 5.5 5.5 0 0 1-5.5-5.5h11z"/>
        </svg>
      </a>
    </button>
      <button>
        <a href="/logout">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-right" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M3.5 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 3.5 13h8a1.5 1.5 0 0 0 1.5-1.5v-9a1.5 1.5 0 0 0-1.5-1.5h-8a1.5 1.5 0 0 0-1.5 1.5v2a.5.5 0 0 0 1 0v-2z"/>
            <path fill-rule="evenodd" d="M10.854 8.354a.5.5 0 0 0 0-.708L8.207 5.5H12.5a.5.5 0 0 0 0-1H8.207l2.647-2.646a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708 0Z"/>
          </svg>
        </a>
      </button>
      <button id="trend1" class="btn btn-primary">CM QUESTION</button>
      <button id="trend2" class="btn btn-primary">Party</button>
      <button id="trend3" class="btn btn-primary">AGE</button>
      <button id="trend4" class="btn btn-primary">OCCUPATION</button>
	</nav>
	<div id="parentele">
		<div>
		  <nav class="left-nav">
			<div class="box">
				<h2>TREND</h2>
			  </div>
			<header>
			  <h4>SELECTION</h4>
			</header>
            <form id="form" >

                <ul>
                  <span>Trend By</span>
                  <li><input class="selectdata" type="radio" class="distinct" name="selectedOption" value='District'>DISTRICTS</li>
                  <li><input class="selectdata" type="radio" class="distinct" name="selectedOption" value="PARLIAMENT">PARLIAMENT</li>
                  <li><input class="selectdata" type="radio" class="distinct" name="selectedOption" value="RCaste">CASTE</li>

                </ul>

                <div id="dropdown">
                    <select name = 'DisParllimnet'>
                        <option value=""></option>
                    </select>
                </div>

              
              
                <!-- <button type="submit" name="submit" class="btn btn-primary">Submit</button> -->
                
              </form>
            </nav>
          </div>
          <figure class="highcharts-figure">
            <div id="mainele"></div>
            
        </figure>
			
		


<script>



// Attach an event listener to the radio inputs
const radioInputs = document.querySelectorAll('input[name="selectedOption"]');
radioInputs.forEach((radioInput) => {
  radioInput.addEventListener('click', async (event) => {
    const selectedOption = event.target.value;

    try {
      const { data } = await axios.get(`/distrctParliment?selectedOption=${selectedOption}`);
      const selectDropdown = document.querySelector('select[name="DisParllimnet"]');
      
      // Get the parent element of the clicked radio input element
      const parent = event.target.parentNode;

      // Add a class to the parent element to show that the radio input is selected
      parent.classList.add('selected');

      // Remove the class from other parent elements to deselect previously selected radio inputs
      const otherParents = document.querySelectorAll('.selected');
      otherParents.forEach((otherParent) => {
        if (otherParent !== parent) {
          otherParent.classList.remove('selected');
        }
      });

      // Clear previous options
      selectDropdown.innerHTML = '';

      // Add new options
      data.forEach((option) => {
        const optionElement = document.createElement('option');
        optionElement.value = option;
        optionElement.textContent = option;
        selectDropdown.appendChild(optionElement);
      });
    } catch (error) {
      console.error(error);
    }
  });
});

const trendButton = document.getElementById('trend1');
const trendButton2 = document.getElementById('trend2');
const trendButton3 = document.getElementById('trend3');
const trendButton4 = document.getElementById('trend4');
// const form = document.getElementById('form');

trendButton.addEventListener('click', async (event) => {
  event.preventDefault();
   // Show the loader
  // Add a loader to the page
  const loader = document.createElement("div");
  loader.classList.add("loader");
  loader.style.position = "fixed";
  loader.style.top = "50%";
  loader.style.left = "60%";
  loader.style.transform = "translate(-50%, -50%)";
  loader.style.border = "25px solid rgba(0, 0, 0, 0.1)";
  loader.style.borderTopColor = "#3498db";
  loader.style.borderRadius = "75%";
  loader.style.width = "250px";
  loader.style.height = "250px";
  loader.style.animation = "spin 1s ease-in-out infinite";
  const text = document.createElement("span");
text.textContent = "Loading data";
text.style.position = "absolute";
text.style.top = "50%";
text.style.left = "50%";
text.style.transform = "translate(-50%, -50%)";
text.style.fontSize = "20px";
text.style.fontWeight = "bold";
loader.appendChild(text);

  document.body.appendChild(loader);


    try {
        const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport2', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data)

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report for CM-Question By Month'
            },
            xAxis: {
                categories: data
                .map(item => moment(item['Month'], 'MMM/YYYY').format('YYYYMM'))
                .sort()
                .map(month => moment(month, 'YYYYMM').format('MMM/YYYY')),
                title: {
                    text: 'Month'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: 'SATISFIED',
                data: data.map(item => parseFloat(item['SATISFIED'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
            }, {
                name: 'YSRCP',
                data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                color: 'rgb(1, 169, 91)'
            },  ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['Month']),
                    title: 'Month '
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    document.body.removeChild(loader);
  }
});


// Fir CM question 
trendButton2.addEventListener('click', async (event) => {
  event.preventDefault();
   // Show the loader
  // Add a loader to the page
  const loader = document.createElement("div");
  loader.classList.add("loader");
  loader.style.position = "fixed";
  loader.style.top = "50%";
  loader.style.left = "60%";
  loader.style.transform = "translate(-50%, -50%)";
  loader.style.border = "25px solid rgba(0, 0, 0, 0.1)";
  loader.style.borderTopColor = "#3498db";
  loader.style.borderRadius = "75%";
  loader.style.width = "250px";
  loader.style.height = "250px";
  loader.style.animation = "spin 1s ease-in-out infinite";
  const text = document.createElement("span");
text.textContent = "Loading data";
text.style.position = "absolute";
text.style.top = "50%";
text.style.left = "50%";
text.style.transform = "translate(-50%, -50%)";
text.style.fontSize = "20px";
text.style.fontWeight = "bold";
loader.appendChild(text);

  document.body.appendChild(loader);


    try {
        const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report for Constituency'
            },
            xAxis: {
                categories: data.map(item => item['R_Constituency']),
                title: {
                    text: 'Constituency'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: '2019 YSRCP',
                data: data.map(item => parseFloat(item['2019 YSRCP'].slice(0, -1)))
            }, {
                name: '2019 TDP',
                data: data.map(item => parseFloat(item['2019 TDP'].slice(0, -1)))
            }, {
                name: '2019 JSP',
                data: data.map(item => parseFloat(item['2019 JSP'].slice(0, -1)))
            }, {
                name: '2019_OTHERS',
                data: data.map(item => parseFloat(item['2019_OTHERS'].slice(0, -1)))
            }
                , {
                    name: 'TDP',
                    data: data.map(item => parseFloat(item['TDP'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
                }, {
                    name: 'JSP',
                    data: data.map(item => parseFloat(item['JSP'].toString().slice(0, -1))),
                    olor: 'rgb(250, 20, 14)'
                }, {
                    name: 'YSRCP',
                    data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                    color: 'rgb(1, 169, 91)'
                }, {
                    name: 'Not Decided',
                    data: data.map(item => parseFloat(item['Not Decided'].toString().slice(0, -1))),
                    color: 'rgb(192, 192, 192)'
                }, {
                    name: 'BJP',
                    data: data.map(item => parseFloat(item['BJP'].toString().slice(0, -1)))
                },  {
                    name: 'INC',
                    data: data.map(item => parseFloat(item['INC'].toString().slice(0, -1)))
                }, ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['R_Constituency']),
                    title: 'Consticuency '
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    document.body.removeChild(loader);
  }
});

// For Age Group 

trendButton3.addEventListener('click', async (event) => {
  event.preventDefault();
   // Show the loader
  // Add a loader to the page
  const loader = document.createElement("div");
  loader.classList.add("loader");
  loader.style.position = "fixed";
  loader.style.top = "50%";
  loader.style.left = "60%";
  loader.style.transform = "translate(-50%, -50%)";
  loader.style.border = "25px solid rgba(0, 0, 0, 0.1)";
  loader.style.borderTopColor = "#3498db";
  loader.style.borderRadius = "75%";
  loader.style.width = "250px";
  loader.style.height = "250px";
  loader.style.animation = "spin 1s ease-in-out infinite";
  const text = document.createElement("span");
text.textContent = "Loading data";
text.style.position = "absolute";
text.style.top = "50%";
text.style.left = "50%";
text.style.transform = "translate(-50%, -50%)";
text.style.fontSize = "20px";
text.style.fontWeight = "bold";
loader.appendChild(text);

  document.body.appendChild(loader);


    try {
        const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport3', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data)

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report For Age Group'
            },
            xAxis: {
                categories: data.map(item => item['Age Group']),
                title: {
                    text: 'Age-Group'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: 'SATISFIED',
                data: data.map(item => parseFloat(item['SATISFIED'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
            }, {
                name: 'YSRCP',
                data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                color: 'rgb(1, 169, 91)'
            },  ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['Age Group']),
                    title: 'Age-Group '
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    document.body.removeChild(loader);
  }
});


// for Occupations 
trendButton4.addEventListener('click', async (event) => {
  event.preventDefault();
   // Show the loader
  // Add a loader to the page
  const loader = document.createElement("div");
  loader.classList.add("loader");
  loader.style.position = "fixed";
  loader.style.top = "50%";
  loader.style.left = "60%";
  loader.style.transform = "translate(-50%, -50%)";
  loader.style.border = "25px solid rgba(0, 0, 0, 0.1)";
  loader.style.borderTopColor = "#3498db";
  loader.style.borderRadius = "75%";
  loader.style.width = "250px";
  loader.style.height = "250px";
  loader.style.animation = "spin 1s ease-in-out infinite";
  const text = document.createElement("span");
text.textContent = "Loading data";
text.style.position = "absolute";
text.style.top = "50%";
text.style.left = "50%";
text.style.transform = "translate(-50%, -50%)";
text.style.fontSize = "20px";
text.style.fontWeight = "bold";
loader.appendChild(text);

  document.body.appendChild(loader);


    try {
        const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport4', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data)

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report For Occupations'
            },
            xAxis: {
                categories: data.map(item => item['Occupation']),
                title: {
                    text: 'Occupations'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: 'SATISFIED',
                data: data.map(item => parseFloat(item['SATISFIED'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
            }, {
                name: 'YSRCP',
                data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                color: 'rgb(1, 169, 91)'
            },  ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['Occupation']),
                    title: 'Occupation'
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    document.body.removeChild(loader);
  }
});


</script>
	  
	
</body>
</html>