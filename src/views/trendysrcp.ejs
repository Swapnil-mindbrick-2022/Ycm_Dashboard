<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" 
	integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

  <link rel="stylesheet" href="./css/trend.css">
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
	 integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

	<!-- Add the datatables library CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css">

<!-- Add the jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Add the datatables library JS -->
<script type="text/javascript" src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>

<!-- Add the column filtering plugin JS -->
<script type="text/javascript" src="https://cdn.rawgit.com/rewonc/jquery.dataTables.columnFilter/v1.5.6/dist/jquery.dataTables.columnFilter.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>
<script src="https://code.highcharts.com/themes/high-contrast-light.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>

	<title>Trends</title>

	<style>
/* html{
    zoom: 80%;
} */

body {
        height: 45rem;
        width: 93.85rem;
        background: rgb(0, 206, 161);
        font-family: "Abadi", sans-serif;

    }
#header {
      display: flex;  
      width:100%;
      margin-top: 15px;
      justify-content: center;
      align-items: center;
     
    }
    #header h1{
      font-size: xx-large; 
      font-style:italic; 
      font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode',Verdana, sans-serif;
      background-color: white;
      box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);
      border-radius: 25px;
      width: 300px;     
      text-align: center;

    }
    /* parentelement */
    #parentele {
    display: flex;
    justify-content: center;
    border: 4px solid lightgrey;
    height: 78%;
    margin-left: 1.2%;
    margin-right: 1.2%;
    /* margin-top: 1px; */
    background-color: white;
    width: 100%
}
#mainele {
    border: 1px solid black;
    height: 95%;
    width: 85%;
    margin-left: 14.5%;
    background-color: whitesmoke;
    
    /* right: 0; */
    /* margin-left: 20px; */
    /* margin-right: 10px; */
    bottom: 0;
    overflow-x: scroll;
    white-space: nowrap;
    }
		/* Styling for the left side navbar */
.left-nav {
			position: absolute;
			left: 0;
			width: 12.5em;
			height: 28.125em;
			background-color:white;
			color:black;
      margin-left: 1.8em;
      margin-top: 0.5em;
			box-sizing: border-box;
			display: flex;
			flex-direction: column;
			justify-content: center;
      border-radius: 0.5em;
			align-items: center;
			/* overflow-y: auto; */
      box-shadow: inset 2px 2px 4px rgb(0, 206, 161);
			border: 1px solid  rgb(0, 74, 132); ;
			/* border-radius: 10%; */
		}
#navbtn{
  background-color: lightgrey;
  display: flex;
  width: 100%;
  margin-left: 20px;
  height: 40px;
  margin-right: 10px;
  margin-top: 1px;
  justify-content: end;
}
#navbar{
      background-color: rgb(0, 74, 132);
      height: 6.2%;
      /* margin: 40px; */
      width: 100%;
      display: flex;
      justify-content: end;
      margin-left: 1.2%;
      margin-right: 1.2%;
      margin-top: 1.2%;
    }
		/* Styling for the headings in side navbars */
		.left-nav h2
		 {
			margin: 0;
			padding: 10px 0;
			text-align: center;
		}

		/* Styling for the links in side navbars */
		.left-nav ul
		{
			list-style: none;
			margin: 0;
			padding: 0;
			display: flex;
			flex-direction: column;
			align-items: center;
			width: 100%;
		}

		.left-nav li
		 {
			width: 100%;
			margin: 10px 0;
		}

		.left-nav a {
			color: black;
			text-decoration: none;
			width: 100%;
			display: block;
			padding: 10px;
			box-sizing: border-box;
			text-align: center;
			border-radius: 5px;
			transition: background-color 0.3s ease;
		}

		.left-nav a:hover
 {
			background-color: #555;
		}
		    /* Set table width to 100% */
			table {
      width: 100%;
    }

    /* Add some spacing between table cells */
    td, th {
      padding: 8px;
    }

    /* Add some borders to table cells */
    td {
      border: 1px solid #ddd;
    }

    /* Add a gray background color to the header row */
    thead tr {
      background-color: #f1f1f1;
    }

    /* Add a hover effect to table rows */
    tbody tr:hover {
      background-color: #f5f5f5;
    }

    /* Customize pagination buttons */
    .paginate_button {
      background-color: #e7e7e7;
      border: 1px solid #ddd;
      color: black;
      padding: 8px 16px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
    }

    .paginate_button:hover {
      background-color: #ddd;
    }

    .paginate_button.current {
      background-color: #4CAF50;
      color: white;
    }

    /* Customize column filter inputs */
    .dataTables_filter input {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 10px;
    }

    .dataTables_filter input:focus {
      outline: none;
      box-shadow: 0 0 3px #ddd;
    }
	.card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 300px;
  height: 400px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  transition: transform 0.2s ease-in-out;
}

.card:hover {
  transform: scale(1.05);
}

.card img {
  width: 100%;
  height: 60%;
  object-fit: cover;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

.card h2 {
  margin: 20px;
  font-size: 20px;
  font-weight: bold;
}

.card p {
  margin: 0 20px 20px;
  font-size: 16px;
  text-align: justify;
}

/* Mobile Styles */
/* 
@media only screen and (max-width: 600px) {
  .card {
    width: 90%;
    height: auto;
  }

  .card img {
    height: 50%;
  }

  .card h2 {
    font-size: 18px;
  }

  .card p {
    font-size: 14px;
  }
} */
/* Style the table */
table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

/* Style the table headers */
th {
  background-color: #f2f2f2;
  text-align: left;
  padding: 8px;
  font-size: 16px;
}

/* Style the table rows */
tr:nth-child(even) {
  background-color: #f2f2f2;
}

tr:hover {
  background-color: #ddd;
}

/* Style the table cells */
td {
  border: 1px solid #ddd;
  padding: 8px;
}
.box {
  background-color: #f4f0f0;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 10px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  transition: box-shadow 0.3s ease;
  width:400px;
}

.box:hover {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
}

.box h2 {
  margin: 0;
}
.box2 {
  background-color: #f4f0f0;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 10px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  transition: box-shadow 0.3s ease;
  width:800px;
  margin-left: 450px;
}

/*  for chart  */




/* Add media queries for responsive design */
/* @media only screen and (max-width: 600px) { */
  /* Adjust the table layout for small screens */
  /* table, th, td {
    display: block;
    width: 100%;
  }
  th, td {
    text-align: center;
  }
} */
.loader {
    height: 20px;
    width: 250px;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    /* display: flex; */
    /* justify-content: center; */
    display: none;    
  }
    .loader--dot {
      animation: loader 1.5s ease-in-out infinite;
      height: 20px;
      width: 20px;
      border-radius: 100%;
      background-color: black;
      position: absolute;
      border: 2px solid white;
      /* display: flex; */
    /* justify-content: center; */
    margin-left: 85%;
    margin-top: 10%;
  
    }
    
    .loader--dot:first-child {
      background-color: #8cc759;
      animation-delay: 0.5s;
    }
    
    .loader--dot:nth-child(2) {
      background-color: #8c6daf;
      animation-delay: 0.4s;
    }
    
    .loader--dot:nth-child(3) {
      background-color: #ef5d74;
      animation-delay: 0.3s;
    }
    
    .loader--dot:nth-child(4) {
      background-color: #f9a74b;
      animation-delay: 0.2s;
    }
    
    .loader--dot:nth-child(5) {
      background-color: #60beeb;
      animation-delay: 0.1s;
    }
    
    .loader--dot:nth-child(6) {
      background-color: #fbef5a;
      animation-delay: 0s;
    }
    
    .loader--text {
      position: absolute;
      /* top: 200%; */
      left: 0;
      right: 0;
      width: 4rem;
      margin-left:75%;
      margin-top:10%;
    
      display: flex;
    justify-content: center;
    }
    
    .loader--text:after {
      content: "Loading";
      font-weight: bold;
      animation: loading-text 3s infinite;
      position: absolute;
      /* top: 200%; */
      /* left: 0;
      right: 0;
      width: 4rem;
      margin-left:30%; */
      /* margin-left:40%;
      margin-top:25%; */
      display: flex;
    justify-content: center;
      
    }
    
    @keyframes loader {
  0% {
    transform: rotate(0) translateX(100px) rotate(0);
  }
  100% {
    transform: rotate(360deg) translateX(100px) rotate(-360deg);
  }
}

    
    @keyframes loading-text {
      0% {
        content: "Loading";
      }
      25% {
        content: "Loading.";
      }
      50% {
        content: "Loading..";
      }
      75% {
        content: "Loading...";
      }
    }
    
.btn {
      padding: 1px;
      margin: 1px;
      font-size: small;
      background-color: #16160b;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      width: auto;
      height: 21px;
      margin-top: 10px;
    }
    .btn:hover {
      background-color:  rgb(0, 206, 161);
    }
    .btn.active:hover {
  background-color: rgb(0, 206, 161);
}



	</style>
</head>
<body>
	<!-- Header -->
		<div id="header" >
			<h1>TREND VIEW</h1>
		  </div>
  <div id="navbar">
  
        
      <!-- <a href="/community" title="PrevView">
        <img src="./a.png" alt="PrevView" width="120" height="35">
      </a> -->
      
     
			<a href="/homepage" title="HomePage">
        <img src="./c.png" alt="Home" width="45" height="40">
      </a>
      <a href="/logout" title="Logout">
        <img src="d.png" alt="Logout" width="35" height="35"  style="margin-right:10px; display: flex; align-items: center; justify-content: center;">
      </a>
	<!-- </nav> -->
  </div>
<div id="navbtn" >
    <button id="trend1" class="btn btn-primary" >CM QUESTION</button>
    <button id="trend2" class="btn btn-primary">PARTY</button>
    <button id="trend3" class="btn btn-primary">AGE</button>
    <button id="trend4" class="btn btn-primary" style="margin-right: 0.7rem;">OCCUPATION</button>
<div>
  </div>
  </div>
	<div id="parentele">
		<div class="left-nav">
		  <nav>
			<header>
			  <h4>SELECTION</h4>
			</header>
            <form id="form">
                <ul>
                  <span style="margin-right:70px;">View By</span>
                  <li><input class="selectdata" type="radio" class="distinct" name="selectedOption" value='District'>DISTRICTS</li>
                  <li><input class="selectdata" type="radio" class="distinct" name="selectedOption" value="PARLIAMENT">PARLIAMENT</li>
                  <li><input class="selectdata" type="radio" class="distinct" name="selectedOption" value="RCaste">CASTE</li>
                </ul>
                <div id="dropdown">
                    <select name = 'DisParllimnet'  style="font-size: 10px;">
                        <option value=""></option>
                    </select>
                </div>    
              </form>
      </nav>
    </div>
          <!-- <figure class="highcharts-figure"> -->
    <div id="mainele">
    </div>
        <!-- </figure> -->
  </div>
  <div class="container">
    <div id="loader" class="loader">
      <div class="loader--dot"></div>
      <div class="loader--dot"></div>
      <div class="loader--dot"></div>
      <div class="loader--dot"></div>
      <div class="loader--dot"></div>
      <div class="loader--dot"></div>
      <div class="loader--text"></div>
    </div>
  </div>
			
		


<script>

// get all buttons and add click event listener to each one
const buttons = document.querySelectorAll('.btn');
buttons.forEach(button => {
  button.addEventListener('click', function() {
    // remove 'active' class from all buttons
    buttons.forEach(b => b.classList.remove('active'));
    // add 'active' class to clicked button
    this.classList.add('active');
  });
});



// Attach an event listener to the radio inputs


const radioInputs = document.querySelectorAll('input[name="selectedOption"]');
radioInputs.forEach((radioInput) => {
  radioInput.addEventListener('click', async (event) => {
    const selectedOption = event.target.value;

    try {
      const { data } = await axios.get(`/distrctParliment?selectedOption=${selectedOption}`);
      const selectDropdown = document.querySelector('select[name="DisParllimnet"]');
      
      // Get the parent element of the clicked radio input element
      const parent = event.target.parentNode;

      // Add a class to the parent element to show that the radio input is selected
      parent.classList.add('selected');

      // Remove the class from other parent elements to deselect previously selected radio inputs
      const otherParents = document.querySelectorAll('.selected');
      otherParents.forEach((otherParent) => {
        if (otherParent !== parent) {
          otherParent.classList.remove('selected');
        }
      });

      // Clear previous options
      selectDropdown.innerHTML = '';

      // Add new options
      data.forEach((option) => {
        const optionElement = document.createElement('option');
        optionElement.value = option;
        optionElement.textContent = option;
        selectDropdown.appendChild(optionElement);
      });
    } catch (error) {
      console.error(error);
    }
  });
});

const trendButton = document.getElementById('trend1');
const trendButton2 = document.getElementById('trend2');
const trendButton3 = document.getElementById('trend3');
const trendButton4 = document.getElementById('trend4');
// const form = document.getElementById('form');

trendButton.addEventListener('click', async (event) => {
  event.preventDefault();
  
  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;
  if (!selectedOption || !DisParllimnet) {
    alert("Please select an option.");
    return;
  }
   // Show the loader
  // Add a loader to the page
  const loader = document.getElementById('loader');
      loader.style.display = 'block';


    try {
        // const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        // const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport2', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data)

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report for CM-Question By Month',
                style: {
    textTransform: 'uppercase' // Transform text to capitals
  }
            },
            xAxis: {
                categories: data
                .map(item => moment(item['Month'], 'MMM/YYYY').format('YYYYMM'))
                .sort()
                .map(month => moment(month, 'YYYYMM').format('MMM/YYYY')),
                title: {
                    text: 'Month'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: 'SATISFIED',
                data: data.map(item => parseFloat(item['SATISFIED'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
            }, {
                name: 'YSRCP',
                data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                color: 'rgb(1, 169, 91)'
            },  ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['Month']),
                    title: 'Month '
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    loader.style.display = 'none';
  }
});


// Fir CM question 
trendButton2.addEventListener('click', async (event) => {
  event.preventDefault();
  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;
  if (!selectedOption || !DisParllimnet) {
    alert("Please select an option.");
    return;
  }
   // Show the loader
  // Add a loader to the page
  const loader = document.getElementById('loader');
      loader.style.display = 'block';


    try {
        // const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        // const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report for Constituency',
                style: {
    textTransform: 'uppercase' // Transform text to capitals
  }
            },
            xAxis: {
                categories: data.map(item => item['R_Constituency']),
                title: {
                    text: 'Constituency'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: '2019 YSRCP',
                data: data.map(item => parseFloat(item['2019 YSRCP'].slice(0, -1)))
            }, {
                name: '2019 TDP',
                data: data.map(item => parseFloat(item['2019 TDP'].slice(0, -1)))
            }, {
                name: '2019 JSP',
                data: data.map(item => parseFloat(item['2019 JSP'].slice(0, -1)))
            }, {
                name: '2019_OTHERS',
                data: data.map(item => parseFloat(item['2019_OTHERS'].slice(0, -1)))
            }
                , {
                    name: 'TDP',
                    data: data.map(item => parseFloat(item['TDP'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
                }, {
                    name: 'JSP',
                    data: data.map(item => parseFloat(item['JSP'].toString().slice(0, -1))),
                    olor: 'rgb(250, 20, 14)'
                }, {
                    name: 'YSRCP',
                    data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                    color: 'rgb(1, 169, 91)'
                }, {
                    name: 'Not Decided',
                    data: data.map(item => parseFloat(item['Not Decided'].toString().slice(0, -1))),
                    color: 'rgb(192, 192, 192)'
                }, {
                    name: 'BJP',
                    data: data.map(item => parseFloat(item['BJP'].toString().slice(0, -1)))
                },  {
                    name: 'INC',
                    data: data.map(item => parseFloat(item['INC'].toString().slice(0, -1)))
                }, ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['R_Constituency']),
                    title: 'Consticuency '
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    loader.style.display = 'none';
  }
});

// For Age Group 

trendButton3.addEventListener('click', async (event) => {
  event.preventDefault();
  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;
  if (!selectedOption || !DisParllimnet) {
    alert("Please select an option.");
    return;
  }
   // Show the loader
  // Add a loader to the page
  const loader = document.getElementById('loader');
      loader.style.display = 'block';


    try {
        // const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        // const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport3', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data)

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report For Age Group',
                style: {
    textTransform: 'uppercase' // Transform text to capitals
  }
            },
            xAxis: {
                categories: data.map(item => item['Age Group']),
                title: {
                    text: 'Age-Group'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: 'SATISFIED',
                data: data.map(item => parseFloat(item['SATISFIED'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
            }, {
                name: 'YSRCP',
                data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                color: 'rgb(1, 169, 91)'
            },  ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['Age Group']),
                    title: 'Age-Group '
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    loader.style.display = 'none';
  }
});


// for Occupations 
trendButton4.addEventListener('click', async (event) => {
  event.preventDefault();
  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;
  if (!selectedOption || !DisParllimnet) {
    alert("Please select an option.");
    return;
  }
   // Show the loader
  // Add a loader to the page
  const loader = document.getElementById('loader');
      loader.style.display = 'block';


    try {
        // const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
        // const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

        const response = await fetch('/TrendReport4', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedOption, DisParllimnet })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data)

        Highcharts.chart('mainele', {
            chart: {
                type: 'spline'
            },
            title: {
                text: 'Trend Report For Occupations',
                style: {
    textTransform: 'uppercase' // Transform text to capitals
  }
            },
            xAxis: {
                categories: data.map(item => item['Occupation']),
                title: {
                    text: 'Occupations'
                }
            },
            yAxis: {
                title: {
                    text: 'Party Percentage'
                }
            },
            tooltip: {
        valueSuffix: '%',
        stickOnContact: true
    },

    plotOptions: {
        series: {
            point: {
                events: {
                    click: function () {
                        window.location.href = this.series.options.website;
                    }
                }
            },
            cursor: 'pointer'
        }
    },


            series: [{
                name: 'SATISFIED',
                data: data.map(item => parseFloat(item['SATISFIED'].toString().slice(0, -1))),
                    color: 'rgb(255, 192, 0)'
            }, {
                name: 'YSRCP',
                data: data.map(item => parseFloat(item['YSRCP'].toString().slice(0, -1))),
                color: 'rgb(1, 169, 91)'
            },  ]
                ,    responsive: {
        rules: [{
            condition: {
                maxWidth: 550
            },
            chartOptions: {
                chart: {
                    spacingLeft: 3,
                    spacingRight: 3
                },
                legend: {
                    itemWidth: 150
                },
                xAxis: {
                  categories: data.map(item => item['Occupation']),
                    title: 'Occupation'
                },
                yAxis: {
                    visible: false
                }
            }
        }]
    }
        });

    } catch (error) {
        console.error('Error: ', error);
    }
    finally {
    // Remove the loader from the page
    loader.style.display = 'none';
  }
});


</script>
	  
	
</body>
</html>