app.get('/submit', (req, res) => {
  const selectedOption = req.query.option;
  let query = '';

  // Build the query based on the selected option
  switch (selectedOption) {
    case 'districts':
      query = 'SELECT District, ...'; // Add the query for districts here
      break;
    case 'parliament':
      query = 'SELECT Parliament, ...'; // Add the query for parliament here
      break;
    case 'caste':
      query = 'SELECT Caste, ...'; // Add the query for caste here
      break;
    default:
      res.send('Invalid option');
      return;
  }

  // Execute the query using Sequelize and retrieve the results
  db.sequelize.query(query, { type: db.sequelize.QueryTypes.SELECT })
    .then(results => {
      // Render the results into an HTML table using EJS
      ejs.renderFile('table.ejs', { data: results }, (err, html) => {
        if (err) throw err;
        res.send(html);
      });
    })
    .catch(error => {
      throw error;
    });
});




dynamic filter table with all individul collumn filter 
const form = document.getElementById("form");
form.addEventListener("submit", async (event) => {
  event.preventDefault();
  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
  const url = `/DPC_Data?selectedOption=${selectedOption}`;
  try {
    const response = await axios.get(url);
    if (response.status === 200) {
      let data = [];
      const contentType = response.headers["content-type"];
      if (contentType.includes("application/json")) {
        data = response.data;
      } else if (contentType.includes("text/plain")) {
        // Parse the plain text data into a JSON object
        data = JSON.parse(response.data);
      } else if (contentType.includes("application/xml")) {
        // Parse the XML data into a JSON object
        data = parseXmlToJSON(response.data);
      } else {
        throw new Error("Unsupported response type");
      }
      const mainele = document.getElementById("mainele");
      mainele.innerHTML = `
        <table id="datatable">
          <thead>
            <tr>
              ${Object.keys(data[0]).map(key => `
                <th>
                  ${key}
                 
                  <select class="filter-dropdown">
                    <option value=""> ${key}</option>
                    ${Array.from(new Set(data.map(row => row[key]))).map(value => `
                      <option value="${value}">${value}</option>
                    `).join("")}
                  </select>
                </th>`).join("")}
            </tr>
          </thead>
          <tbody>
            ${data.map(row => `
              <tr>
                ${Object.values(row).map(value => `<td>${value}</td>`).join("")}
              </tr>
            `).join("")}
          </tbody>
        </table>
      `;
      // Initialize DataTable plugin with pagination and column filtering options
      $(document).ready(function() {
        const table = $('#datatable').DataTable({
          "pagingType": "full_numbers",
          "searching": true,
          "ordering": true,
          "order": [[ 0, "asc" ]],
          "columnDefs": [
            { "targets": '_all', "searchable": true },
            { "targets": '_all', "sortable": true }
          ]
        });
        $('.search-input').on('keyup', function () {
          const columnIdx = $(this).parent().index();
          const searchValue = $(this).val();
          table.column(columnIdx).search(searchValue).draw();
        });
        $('.filter-dropdown').on('change', function () {
          const columnIdx = $(this).parent().index();
          const filterValue = $(this).val();
          table.column(columnIdx).search(filterValue).draw();
        });
      });
    } else {
      throw new Error("Response not OK");
    }
  } catch (error) {
    console.error(error);
  }
});










// for indexing   
      query += `CREATE INDEX idx_district ON datasurveys(DISTRICT);
                 CREATE INDEX idx_district_party ON datasurveys(DISTRICT, \`WHICH PARTY WILL YOU SUPPORT IF THE ELECTIONS ARE HELD BY NOW?\`);
                 CREATE INDEX idx_district_factor ON datasurveys(DISTRICT, FACTOR);`;
    
query += `CREATE INDEX idx_parliament ON datasurveys(PARLIAMENT);
             CREATE INDEX idx_parliament_party ON datasurveys(PARLIAMENT, \`WHICH PARTY WILL YOU SUPPORT IF THE ELECTIONS ARE HELD BY NOW?\`);
             CREATE INDEX idx_parliament_factor ON datasurveys(PARLIAMENT, FACTOR);`;





const uploadmuliplefiles = async (req, res, next) => {
  const message = [];
  const batchSize = 70000;
  const filePath = __basedir + "/resources/static/assets/uploads/";

  const occupationMap = {
    'స్వయం ఉపాధి / సొంత వ్యాపారం': 'Self-Employed/Business',
    'గృహిణి': 'House-Wife',
    'రోజు వారి కూలి': 'Daily Wager',
    'విద్యార్థులు / ఇతరులు': 'Students/Others',
    'రైతు': 'Farmer',
    'ఉద్యోగస్తులు': 'Salaried'
  };

  const preferredMLAMap = {
    'బాగోలేదు': 'Not Good',
    'బాగుంది': 'Good',
    'ఏమి చెప్పలేను': 'Idle'
  };
  
  for (let file of req.files) {
    try {
      const path = filePath + file.filename;
      const rows = reader.read(path, { type: 'file' });
      const sheetNames = rows.SheetNames;
  
      for (let sheetName of sheetNames) {
        const arr = reader.utils.sheet_to_json(rows.Sheets[sheetName]);
        const batches = chunkArray(arr, batchSize);
  
        for (let batch of batches) {
          const bulkData = batch.map((res) => {
            return {
              DISTRICT: res["DISTRICT"] || null,
              PARLIAMENT: res.PARLIAMENT  || null,
              PHASE: res["PHASE"] || null,
              TIMESTAMP: res["TIMESTAMP"] || null,
              GENDER: res["GENDER"] || null,
              ["CONTACT NUMBER"]: res["CONTACT NUMBER"] || null,
              ["AGE GROUP"]: res["AGE GROUP"] || null,
              OCCUPATION: occupationMap[res.OCCUPATION] || null,
              CASTE: res["CASTE"] || null,
              CONSTITUENCY: res["CONSTITUENCY"] || null,
              ['MANDAL NAME']: res['MANDAL NAME'] || null,
              ['GP NAME']: res['GP NAME'] || null,
              ['CM SATISFACTION']: res['CM SATISFACTION'] || null,
              ["WHICH PARTY WILL YOU SUPPORT IF THE ELECTIONS ARE HELD BY NOW?"]: res["WHICH PARTY WILL YOU SUPPORT IF THE ELECTIONS ARE HELD BY NOW?"] || null,
              ['CURRENT MLA SATISFACTION']: res['CURRENT MLA SATISFACTION'] || null,
              ['PREFERED MLA']: preferredMLAMap[res['PREFERED MLA']] || null,
              ['FACTOR']: res['FACTOR'] || null,
            };
          });
  
          await PD_data.bulkCreate(bulkData, {
            raw: true,
            benchmark: true,
            returning: false,
          });




Here are all the data types available in Sequelize:

Sequelize.STRING: for strings.
Sequelize.CHAR: for strings with a fixed length.
Sequelize.TEXT: for long strings.
Sequelize.INTEGER: for integers.
Sequelize.BIGINT: for large integers.
Sequelize.FLOAT: for floating point numbers.
Sequelize.REAL: for single-precision floating point numbers.
Sequelize.DOUBLE: for double-precision floating point numbers.
Sequelize.DECIMAL: for fixed-point numbers.
Sequelize.DATE: for dates.
Sequelize.DATEONLY: for dates without time.
Sequelize.BOOLEAN: for booleans.
Sequelize.ENUM: for enumerable values.
Sequelize.ARRAY: for arrays of other data types.
Sequelize.JSON: for JSON data.
Sequelize.JSONB: for JSON data stored as binary format.
Sequelize.UUID: for UUIDs.
Sequelize.GEOMETRY: for spatial data types.
Sequelize.GEOGRAPHY: for geographic data types.
Additionally, Sequelize provides some special types for dealing with associations between models:

Sequelize.INTEGER: for foreign keys.
Sequelize.ARRAY(Sequelize.INTEGER): for many-to-many associations.
Note that the availability of some data types depends on the database engine and version you are using. For example, the ENUM data type may not be available in some databases, while the JSONB data type is specific to PostgreSQL. Therefore, it's important to refer to the Sequelize documentation and the database dialect documentation to determine which data types are available for your specific use case.



<!DOCTYPE html>
<html>
  <head>
    <title>My Page</title>
    <style>
      body {
        background: linear-gradient(to bottom right, #2c3e50, #dda8d4);
        position: relative;
      }

      body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('political-image-1.jpg');
        background-repeat: no-repeat;
        background-size: contain;
        z-index: -1;
      }

      body::after {
        content: "";
        position: fixed;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        background-image: url('political-image-2.jpg');
        background-repeat: no-repeat;
        background-size: contain;
        z-index: -1;
      }

      .political-image-3 {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 300px;
        height: 300px;
        background-image: url('political-image-3.jpg');
        background-repeat: no-repeat;
        background-size: cover;
        z-index: -1;
      }

      .political-image-4 {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 200px;
        height: 200px;
        background-image: url('political-image-4.jpg');
        background-repeat: no-repeat;
        background-size: contain;
        z-index: -1;
      }
    </style>
  </head>
  <body>
    <div class="political-image-3"></div>
    <div class="political-image-4"></div>
    <!-- The rest of your HTML code goes here -->
  </body>
</html>





// for cm question 
SELECT
  GROUP_CONCAT(CONCAT(ROUND(IF(Gender = 'MALE', SUM(IF(\`CM_Satisfaction\` = 'Good', factor, 0)), 0) / SUM(IF(Gender = 'MALE', factor, 0)) * 100), '%')) AS MALE,
  GROUP_CONCAT(CONCAT(ROUND(IF(Gender = 'FEMALE', SUM(IF(\`CM_Satisfaction\` = 'Good', factor, 0)), 0) / SUM(IF(Gender = 'FEMALE', factor, 0)) * 100), '%')) AS FEMALE,
  GROUP_CONCAT(CONCAT(ROUND(SUM(IF(\`CM_Satisfaction\` = 'Good', factor, 0)) / SUM(factor) * 100), '%')) AS TOTAL
FROM 
  fileddata
WHERE 
  Gender IS NOT NULL AND \`CM_Satisfaction\` IS NOT NULL AND factor IS NOT NULL
  ${district ? `AND District = '${district}'` : ''}
  ${constituency ? `AND Constituency = '${constituency}'` : ''}
  ${week ? `AND Week = '${week}'` : ''}
  
UNION ALL

SELECT
  GROUP_CONCAT(CONCAT(ROUND(IF(Gender = 'MALE', SUM(IF(\`CM_Satisfaction\` = 'Not Good', factor, 0)), 0) / SUM(IF(Gender = 'MALE', factor, 0)) * 100), '%')) AS MALE,
  GROUP_CONCAT(CONCAT(ROUND(IF(Gender = 'FEMALE', SUM(IF(\`CM_Satisfaction\` = 'Not Good', factor, 0)), 0) / SUM(IF(Gender = 'FEMALE', factor, 0)) * 100), '%')) AS FEMALE,
  GROUP_CONCAT(CONCAT(ROUND(SUM(IF(\`CM_Satisfaction\` = 'Not Good', factor, 0)) / SUM(factor) * 100), '%')) AS TOTAL
FROM 
  fileddata
WHERE 
  Gender IS NOT NULL AND \`CM_Satisfaction\` IS NOT NULL AND factor IS NOT NULL
  ${district ? `AND District = '${district}'` : ''}
  ${constituency ? `AND Constituency = '${constituency}'` : ''}
  ${week ? `AND Week = '${week}'` : ''}




		const goodSmileyDiv = document.createElement('div');
		goodSmileyDiv.innerHTML = '&#x1F603; Satisfaction with STATE Government: Good';
		resultContainer.appendChild(goodSmileyDiv);

		// Create a div for the "Not Good" smiley
		const notGoodSmileyDiv = document.createElement('div');
		notGoodSmileyDiv.innerHTML = '&#x1F641; Satisfaction with STATE Government: Not Good';
		resultContainer.appendChild(notGoodSmileyDiv);












const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';
  if (selectedOption === 'District') {
    districtOrParliament = 'fd.`District`';
  } else if (selectedOption === 'PARLIAMENT') {
    districtOrParliament = 'fd.`Parliament`';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const query = `
    SELECT 
      tc.Caste,
      CONCAT(ROUND(SUM(CASE WHEN ${districtOrParliament} = 'ANANTAPUR' THEN fd.factor ELSE 0 END) / SUM(fd.factor) * 100), '%') AS ANANTAPUR,
      CONCAT(ROUND(SUM(CASE WHEN ${districtOrParliament} = 'PRAKASAM' THEN fd.factor ELSE 0 END) / SUM(fd.factor) * 100), '%') AS PRAKASAM,
      CONCAT(ROUND(SUM(CASE WHEN ${districtOrParliament} = 'VISAKHAPATNAM' THEN fd.factor ELSE 0 END) / SUM(fd.factor) * 100), '%') AS VISAKHAPATNAM,
      CONCAT(ROUND(SUM(CASE WHEN ${districtOrParliament} = 'VIZIANAGARAM' THEN fd.factor ELSE 0 END) / SUM(fd.factor) * 100), '%') AS VIZIANAGARAM
    FROM fileddata fd 
    JOIN (SELECT DISTINCT Caste FROM fileddata WHERE Caste IS NOT NULL AND \`Party\` = '${selectedParty}' ORDER BY Caste) tc ON fd.Caste = tc.Caste
    WHERE fd.\`Party\` = '${selectedParty}' 
    GROUP BY tc.Caste;
  `;

  try {
    const result = await db.sequelize.query(query);
    const data = result[0].map((item) => {
      const newObj = { Caste: item.Caste };
      newObj['ANANTAPUR'] = item.ANANTAPUR;
      newObj['PRAKASAM'] = item.PRAKASAM;
      newObj['VISAKHAPATNAM'] = item.VISAKHAPATNAM;
      newObj['VIZIANAGARAM'] = item.VIZIANAGARAM;
      return newObj;
    });
    res.json(data);
  } catch (error) {
    console.error(error);
    res.status(500).send('Internal Server Error');
  }
};
















const form = document.getElementById('form');

form.addEventListener('submit', async (event) => {
  event.preventDefault();

  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
  const DisParllimnet = document.querySelector('select[name="DisParllimnet"]').value;

  const response = await fetch('/TrendReport', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ selectedOption, DisParllimnet})
  });

  const data = await response.json();
  console.log(data)

  // Create the chart
  const chartData = {};
  const parties = ['2019 YSRCP', '2019 TDP', '2019 JSP', '2014 YSRCP', '2014 TDP', '2014 Others', 'TDP', 'JSP', 'YSRCP', 'Not Decided', 'BJP', 'INC'];
  for (const party of parties) {
    chartData[party] = [];
  }

  data.sort((a, b) => a.Constituency.localeCompare(b.Constituency)); // sort data by constituency

  const uniqueConstituencies = [...new Set(data.map(obj => obj.Constituency))];
  console.log(uniqueConstituencies)

  for (const constituency of uniqueConstituencies) {
    const constituencyData = {};
    for (const party of parties) {
      constituencyData[party] = 0;
    }

    for (const row of data.filter(obj => obj.Constituency === constituency)) {
      for (const party of parties) {
        constituencyData[party] += parseFloat(row[party]);
      }
    }

    for (const party of parties) {
      chartData[party].push({x: constituency, y: constituencyData[party]});
    }
  }

  Highcharts.chart('mainele', {
    chart: {
      type: 'spline'
    },
    title: {
      text: 'Election Trend Report'
    },
    xAxis: {
      categories: uniqueConstituencies, // use sorted and unique constituency array
    },
    yAxis: {
      title: {
        text: 'Percentage of Votes (%)'
      },
      labels: {
        format: '{value}%'
      }
    },
    series: Object.keys(chartData).map(key => {
      return {
        name: key,
        data: chartData[key].map(item => ({x: item.x, y: item.y * 100})), // multiply by 100 and format as percentage
      }
    })
  });
});


























const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';

  if (selectedOption.toUpperCase() === 'DISTRICT') {
    districtOrParliament = 'District';
  } else if (selectedOption.toUpperCase() === 'PARLIAMENT') {
    districtOrParliament = 'Parliament';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const districts = await db.fileddata.findAll({
    attributes: [[Sequelize.literal(`DISTINCT(${districtOrParliament})`), 'district']],
    order: [[Sequelize.col('district'), 'ASC']],
    raw: true
  }).then(rows => rows.map(row => row.district));

  const attributes = [
    'Caste',
    ...districts.map(district => [
      Sequelize.literal(`CONCAT(ROUND(SUM(CASE WHEN ${districtOrParliament} = '${district}' THEN factor ELSE 0 END) / SUM(factor) * 100), '%')`),
      district
    ])
  ];

  const result = await db.fileddata.findAll({
    attributes,
    where: {
      Party: selectedParty,
      Caste: {
        [Op.not]: null
      }
    },
    group: ['Caste'],
    order: [
      ['Caste', 'ASC']
    ],
    raw: true
  });

  const output = result.map(item => {
    const newObj = { Caste: item.Caste };
    districts.forEach(district => {
      newObj[district] = item[district];
    });
    return newObj;
  });

  res.json(output);
};






show by avg district 


const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';

  if (selectedOption.toUpperCase() === 'DISTRICT') {
    districtOrParliament = 'District';
  } else if (selectedOption.toUpperCase() === 'PARLIAMENT') {
    districtOrParliament = 'Parliament';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const districts = await db.fileddata.findAll({
    attributes: [[Sequelize.literal(`DISTINCT(${districtOrParliament})`), 'district']],
    order: [[Sequelize.col('district'), 'ASC']],
    raw: true
  }).then(rows => rows.map(row => row.district));

  const attributes = [
    'Caste', 'R_Constituency',
    
    ...districts.map(district => [
      Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN ${districtOrParliament} = '${district}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
      district
    ])
  ];

  const result = await db.fileddata.findAll({
    attributes,
    where: {
      Party: selectedParty,
      
      Caste: {
        [Op.not]: null
      }
    },
    group: ['Caste'],
    order: [
      ['Caste', 'ASC']
    ],
    raw: true
  });

  const output = result.map(item => {
    const newObj = { Caste: item.Caste };
    districts.forEach(district => {
      newObj[district] = item[district];
    });
    return newObj;
  });

  res.json(output);
};






const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';

  if (selectedOption.toUpperCase() === 'DISTRICT') {
    districtOrParliament = 'District';
  } else if (selectedOption.toUpperCase() === 'PARLIAMENT') {
    districtOrParliament = 'Parliament';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const districts = await db.fileddata.findAll({
    attributes: [[Sequelize.literal(`DISTINCT(${districtOrParliament})`), 'district']],
    order: [[Sequelize.col('district'), 'ASC']],
    raw: true
  }).then(rows => rows.map(row => row.district));

  const attributes = [
    'Caste', 'R_Constituency',
    
    ...districts.map(district => [
      Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN ${districtOrParliament} = '${district}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
      district
    ]),

    Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
  ];

  const result = await db.fileddata.findAll({
    attributes,
    where: {
      Caste: {
        [Op.not]: null
      }
    },
    group: ['Caste'],
    order: [
      ['Caste', 'ASC']
    ],
    raw: true
  });

  const output = result.map(item => {
    const newObj = { Caste: item.Caste };
    districts.forEach(district => {
      newObj[district] = item[district];
    });
    newObj[selectedParty] = item[`CONCAT(ROUND(LEAST(AVG(CASE WHEN Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`];
    return newObj;
  });

  res.json(output);
  console.log(output)
};










const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';

  if (selectedOption.toUpperCase() === 'DISTRICT') {
    districtOrParliament = 'District';
  } else if (selectedOption.toUpperCase() === 'PARLIAMENT') {
    districtOrParliament = 'Parliament';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const districts = await db.fileddata.findAll({
    attributes: [[Sequelize.literal(`DISTINCT(${districtOrParliament})`), 'district']],
    order: [[Sequelize.col('district'), 'ASC']],
    raw: true
  }).then(rows => rows.map(row => row.district));

  const attributes = [
    'Caste',
    
    ...districts.map(district => [
      Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN ${districtOrParliament} = '${district}' AND Caste IS NOT NULL AND Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
      district
    ]),

    Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN Caste IS NOT NULL AND Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
  ];

  const result = await db.fileddata.findAll({
    attributes,
    where: {
      Caste: {
        [Op.not]: null
      }
    },
    group: ['Caste'],
    order: [
      ['Caste', 'ASC']
    ],
    raw: true
  });

  const output = result.map(item => {
    const newObj = { Caste: item.Caste };
    districts.forEach(district => {
      newObj[district] = `${item[district]}`;
    });
    newObj[selectedParty] = `${item[`CONCAT(ROUND(LEAST(AVG(CASE WHEN ${districtOrParliament} IS NOT NULL AND Caste IS NOT NULL AND Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`]}`;
    return newObj;
  });

  res.json(output);
  console.log(output)
};






const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';

  if (selectedOption.toUpperCase() === 'DISTRICT') {
    districtOrParliament = 'District';
  } else if (selectedOption.toUpperCase() === 'PARLIAMENT') {
    districtOrParliament = 'Parliament';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const districts = await db.fileddata.findAll({
    attributes: [[Sequelize.literal(`DISTINCT(${districtOrParliament})`), 'district']],
    order: [[Sequelize.col('district'), 'ASC']],
    raw: true
  }).then(rows => rows.map(row => row.district));

  const attributes = [
    'Caste',
    
    ...districts.map(district => [
      Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN ${districtOrParliament} = '${district}' AND Caste IS NOT NULL AND Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
      district
    ]),

    Sequelize.literal(`CONCAT(ROUND(LEAST(AVG(CASE WHEN Caste IS NOT NULL AND Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100)), '%')`),
  ];

  const result = await db.fileddata.findAll({
    attributes,
    where: {
      Caste: {
        [Op.not]: null
      }
    },
    group: ['Caste'],
    order: [
      ['Caste', 'ASC']
    ],
    raw: true
  });

  const output = result.map(item => {
    const newObj = { Caste: item.Caste };
    districts.forEach(district => {
      newObj[district] = `${item[district]}`;
    });
    // newObj[selectedParty] = `${item[`ROUND(LEAST(AVG(CASE WHEN Caste IS NOT NULL AND Party = '${selectedParty}' THEN factor ELSE 0 END) * 100, 100))`]}`;
    return newObj;
  });

  res.json(output);
  console.log(output)
};





/// Comunitu page with indexing

const districtAndParliaments = async (req, res, next) => {
  const { selectedOption, selectedParty } = req.query;

  if (!selectedOption || !selectedParty) {
    res.status(400).send('Please select both options');
    return;
  }

  let districtOrParliament = '';

  if (selectedOption.toUpperCase() === 'DISTRICT') {
    districtOrParliament = 'District';
  } else if (selectedOption.toUpperCase() === 'PARLIAMENT') {
    districtOrParliament = 'Parliament';
  } else {
    res.status(400).send('Invalid selectedOption');
    return;
  }

  const districts = await db.fileddata.findAll({
    attributes: [[Sequelize.literal(`DISTINCT(${districtOrParliament})`), 'district']],
    order: [[Sequelize.col('district'), 'ASC']],
    raw: true
  }).then(rows => rows.map(row => row.district));

  const attributes = [
    'Caste',
    ...districts.map(district => [
      Sequelize.literal(`COALESCE(CONCAT(ROUND(SUM(CASE WHEN ${districtOrParliament} = '${district}' AND Party = '${selectedParty}' THEN factor ELSE 0 END)/SUM(CASE WHEN ${districtOrParliament} = '${district}' THEN factor ELSE 0 END)*100, 2), '%'), 0)`),
      district
    ]),
  ];

  const result = await db.fileddata.findAll({
    attributes,
    where: {
      Caste: {
        [Op.not]: null
      },
      Party: selectedParty,
      [districtOrParliament]: {
        [Op.not]: null
      }
    },
    group: ['Caste'],
    order: [
      ['Caste', 'ASC']
    ],
    raw: true,
    // Add the following option to use the suggested index
    indexHints: [{ type: QueryTypes.INDEX, values: ['idx_party_district_parliament_caste'] }]
  });

  const output = result.map(item => {
    const newObj = { Caste: item.Caste };
    districts.forEach(district => {
      newObj[`${district} - ${selectedParty}`] = `${item[district]}`;
    });
    return newObj;
  });

  res.json(output);
  // console.log(output)
};




const form = document.getElementById("form");
form.addEventListener("submit", async (event) => {
  event.preventDefault();
  const selectedOption = document.querySelector('input[name="selectedOption"]:checked').value;
  const url = `/DPC_Data?selectedOption=${selectedOption}`;
  try {
    loadingWrapper.style.display = "block"; // Show the loader
    const response = await axios.get(url);
    if (response.status === 200) {
      let data = [];
      const contentType = response.headers["content-type"];
      if (contentType.includes("application/json")) {
        data = response.data;
      } else if (contentType.includes("text/plain")) {
        // Parse the plain text data into a JSON object
        data = JSON.parse(response.data);
      } else if (contentType.includes("application/xml")) {
        // Parse the XML data into a JSON object
        data = parseXmlToJSON(response.data);
      } else {
        throw new Error("Unsupported response type");
      }
      const mainele = document.getElementById("mainele");
      mainele.innerHTML = `
        <table id="datatable">
            <thead>
              <tr>
                ${Object.keys(data[0]).map((key, index) => `
                <th>
                    ${key}
                    ${index === 0 ? `
                    <select class="filter-dropdown">
                        <option value=""> ${key}</option>
                        ${Array.from(new Set(data.map(row => row[key]))).map(value => `
                        <option value="${value}">${value}</option>
                        `).join("")}
                    </select>` : ''}
                </th>`).join("")}
              </tr>
              </thead>

          <tbody>
            ${data.map(row => `
              <tr>
                ${Object.values(row).map(value => `<td>${value}</td>`).join("")}
              </tr>
            `).join("")}
          </tbody>
        </table>
      `;
      // Initialize DataTable plugin with pagination and column filtering options
      $(document).ready(function() {
        const table = $('#datatable').DataTable({
          "pagingType": "full_numbers",
          "searching": true,
          "ordering": true,
          "order": [[ 0, "asc" ]],
          "columnDefs": [
            { "targets": '_all', "searchable": true },
            { "targets": '_all', "sortable": true }
          ]
        });
        $('.search-input').on('keyup', function () {
          const columnIdx = $(this).parent().index();
          const searchValue = $(this).val();
          table.column(columnIdx).search(searchValue).draw();
        });
        $('.filter-dropdown').on('change', function () {
          const columnIdx = $(this).parent().index();
          const filterValue = $(this).val();
          table.column(columnIdx).search(filterValue).draw();
        });
      });
    } else {
      throw new Error("Response not OK");
    }
  } catch (error) {
    console.error(error);
  } finally {
    loadingWrapper.style.display = "none";
  }
}); 


















    query = `SELECT 
        District, 
        CONCAT(
            ROUND((SUM(CASE WHEN Party = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100, 2), '%'
        ) AS YSRCP,
        CONCAT(
            ROUND((SUM(CASE WHEN Party = 'TDP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100, 2), '%'
        ) AS TDP,
        CONCAT(
            ROUND(((SUM(CASE WHEN Party = 'JSP' THEN Factor ELSE 0 END) + SUM(CASE WHEN Party = 'BJP' THEN Factor ELSE 0 END)) / SUM(Factor)) * 100, 2), '%'
        ) AS JSP_BJP,
        CONCAT(
            ROUND((SUM(CASE WHEN Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') THEN Factor ELSE 0 END) / SUM(Factor)) * 100, 2), '%'
        ) AS OTHER
    FROM fileddata
    WHERE Party IS NOT NULL
    ${Gender ? `AND Gender = '${Gender}'` : ''}
    ${Caste ? `AND Caste = '${Caste}'` : ''}
    ${age ? `AND \`Age Group\` = '${age}'` : ''}
    ${District ? `AND District = '${District}'` : ''}
    ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
    GROUP BY District;
    `;




    async registerCandidate(req, res) {
            const { name, college, email, mobile, rollno } = req.body;
          
            console.log(name, college, email, mobile, rollno);
          
            Candidates.findOne({ username: email })
              .then((data) => {
                if (data) {
                  res.send('User already exists');
                } else {
                  const newUser = new Candidates({
                    Name: name,
                    College: college,
                    username: email,
                    Mobileno: mobile,
                    Rollno: rollno,
                    password: rollno,
                  });
          
                  // Save the new user to the database
                  newUser
                    .save()
                    .then((data) => {
                      if (data) {
                        // Send email to user with their username and password
                        const transporter = nodemailer.createTransport({
                          service: 'gmail',
                          auth: {
                            user: '', // replace with your own Gmail address
                            pass: '', // replace with your own Gmail password
                          },
                        });
          
                        const mailOptions = {
                          from: , // replace with your own Gmail address
                          to: email,
                          subject: 'Registration successful',
                          text: `Thank you for registering! Your username is ${email} and your password is ${rollno}.`,
                        };
          
                        transporter.sendMail(mailOptions, (error, info) => {
                          if (error) {
                            console.log(error);
                          } else {
                            console.log('Email sent: ' + info.response);
                          }
                        });
          
                        // Redirect user to homepage
                        return res.redirect('/');
                      }
                    })
                    .catch((err) => res.send(err));
                }
              })
              .catch((err) => res.send(err));
          },














          WITH \`mandal_avgs\` AS (
      SELECT
          fileddata.Rev_Mandal AS MANDAL,
          CONCAT(FORMAT(AVG(resultdata.\`2019_YSRCP\`), 0), '%') AS '2019 YSRCP',
          CONCAT(FORMAT(AVG(resultdata.\`2019_TDP\`), 0), '%') AS '2019 TDP',
          CONCAT(FORMAT(AVG(resultdata.\`2019_JSP\`), 0), '%') AS '2019 JSP',
          CONCAT(FORMAT(AVG(resultdata.\`2014_YSRCP\`), 0), '%') AS '2014 YSRCP',
          CONCAT(FORMAT(AVG(resultdata.\`2014_TDP\`), 0), '%') AS '2014 TDP',
          CONCAT(FORMAT(AVG(resultdata.\`2014_Others\`), 0), '%') AS '2014 Others',
          CONCAT(FORMAT(SUM(CASE WHEN fileddata.Party = 'YSRCP' THEN fileddata.Factor ELSE 0 END) / SUM(fileddata.Factor) * 100, 0), '%') AS YSRCP,
          CONCAT(FORMAT(SUM(CASE WHEN fileddata.Party = 'TDP' THEN fileddata.Factor ELSE 0 END) / SUM(fileddata.Factor) * 100, 0), '%') AS TDP,
          CONCAT(ROUND((((SUM(CASE WHEN fileddata.Party = 'JSP' THEN fileddata.Factor ELSE 0 END) + SUM(CASE WHEN fileddata.Party = 'BJP' THEN fileddata.Factor ELSE 0 END)) / SUM(fileddata.Factor)) * 100)), '%') AS JSP_BJP,
          CONCAT(ROUND(((SUM(CASE WHEN fileddata.Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') THEN fileddata.Factor ELSE 0 END) / SUM(fileddata.Factor)) * 100)), '%') AS OTHER
  
      FROM resultdata
      LEFT JOIN fileddata ON resultdata.\`Mandal Name\` = fileddata.\`Rev_Mandal\`
      WHERE fileddata.CM_Satisfaction IN ('Good', 'Not Good')
          AND fileddata.District = :district
          AND fileddata.R_Constituency = :constituency
          AND fileddata.Date = :Date
          AND fileddata.Rev_Mandal IS NOT NULL -- Exclude the 'Total' row
      GROUP BY fileddata.Rev_Mandal
  )
  SELECT 'Total' AS MANDAL,
   CONCAT(FORMAT(AVG(\`2019 YSRCP\`), 0), '%') AS \`2019 YSRCP\`,
   CONCAT(FORMAT(AVG(\`2019 TDP\`), 0), '%') AS \`2019 TDP\`,
   CONCAT(FORMAT(AVG(\`2019 JSP\`), 0), '%') AS \`2019 JSP\`,
   CONCAT(FORMAT(AVG(\`2014 YSRCP\`), 0), '%') AS \`2014 YSRCP\`,
   CONCAT(FORMAT(AVG(\`2014 TDP\`), 0), '%') AS \`2014 TDP\`,
   CONCAT(FORMAT(AVG(\`2014 Others\`), 0), '%') AS \`2014 Others\`,
   CONCAT(FORMAT(AVG(YSRCP), 0), '%') AS YSRCP,
   CONCAT(FORMAT(AVG(TDP), 0), '%') AS TDP,
   CONCAT(FORMAT(AVG(JSP_BJP), 0), '%') AS JSP_BJP,
   CONCAT(FORMAT(AVG(OTHER), 0), '%') AS OTHER
  FROM \`mandal_avgs\`
  UNION ALL
  SELECT \`MANDAL\`,
      \`2019 YSRCP\`,
      \`2019 TDP\`,
      \`2019 JSP\`,
      \`2014 YSRCP\`,
      \`2014 TDP\`,
      \`2014 Others\`,
      YSRCP,
      TDP,
      JSP_BJP,
      OTHER
  FROM \`mandal_avgs\`
  ORDER BY \`MANDAL\`; 















  overview page :

  const sequelize  = require('sequelize')
const { QueryTypes } = require('sequelize');
const nodeify = require('nodeify');
const CsvParser = require("json2csv").Parser;
const db = require("../../models");
const PD_data = db.PD_data;
const _ = require('lodash');




// const XLSX = require("read-excel-file/node");
// const ivrs = require("../../models/ivrs.model");
// const excel = require('fast-xlsx-reader');
const reader = require('xlsx');

const excel = require("exceljs");

const fs = require("fs");


const DPC_data = async (req, res, next) => {
  const {selectedOption,Gender,Caste,age,District,PARLIAMENT} = req.body;
  let query = '';


  // Build the query based on the selected option
  switch (selectedOption) {
    
      case 'District':
        query = `
        SELECT
        t1.District,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100),1), '%') AS YSRCP,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'TDP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100),1), '%') AS TDP,
        CONCAT(ROUND((((SUM(CASE WHEN Party = 'JSP' THEN Factor ELSE 0 END) + SUM(CASE WHEN Party = 'BJP' THEN Factor ELSE 0 END)) / SUM(Factor)) * 100),1), '%') AS JSP_BJP,
        CONCAT(ROUND(((SUM(CASE WHEN Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') THEN Factor ELSE 0 END) / SUM(Factor)) * 100),1), '%') AS OTHER
    FROM (
        SELECT R_Constituency, District, Week, Factor, Party
        FROM fileddata
         WHERE Party IS NOT NULL
          ${Gender ? `AND Gender = '${Gender}'` : ''}
          ${Caste ? `AND RCaste = '${Caste}'` : ''}
          ${age ? `AND \`Age Group\` = '${age}'` : ''}
          ${District ? `AND District = '${District}'` : ''}
          ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
    ) AS t1
    JOIN (
        SELECT R_Constituency, MAX(Week) AS Max_date
        FROM fileddata
         WHERE Party IS NOT NULL
          ${Gender ? `AND Gender = '${Gender}'` : ''}
          ${Caste ? `AND RCaste = '${Caste}'` : ''}
          ${age ? `AND \`Age Group\` = '${age}'` : ''}
          ${District ? `AND District = '${District}'` : ''}
          ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
        GROUP BY R_Constituency
    ) AS t2 ON t1.R_Constituency = t2.R_Constituency AND t1.Week = t2.Max_date
    GROUP BY t1.District
    ORDER BY 
      CASE 
        WHEN District = 'SRIKAKULAM' THEN 1 
        WHEN District = 'VIZIANAGARAM' THEN 2 
        WHEN District = 'VISAKHAPATNAM' THEN 3
        WHEN District = 'EAST GODAVARI' THEN 4 
        WHEN District = 'WEST GODAVARI' THEN 5
        WHEN District = 'KRISHNA' THEN 6 
        WHEN District = 'GUNTUR' THEN 7
        WHEN District = 'PRAKASAM' THEN 8 
        WHEN District = 'NELLORE' THEN 9
        WHEN District = 'KADAPA' THEN 10 
        WHEN District = 'KURNOOL' THEN 11
        WHEN District = 'CHITTOOR' THEN 12
        ELSE 13 
      END;
        `;// Add the query for districts here
      break;
    case 'PARLIAMENT':
        query = `SELECT
        t1.PARLIAMENT,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS YSRCP,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'TDP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS TDP,
        CONCAT(ROUND((((SUM(CASE WHEN Party = 'JSP' THEN Factor ELSE 0 END) + SUM(CASE WHEN Party = 'BJP' THEN Factor ELSE 0 END)) / SUM(Factor)) * 100)), '%') AS JSP_BJP,
        CONCAT(ROUND(((SUM(CASE WHEN Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS OTHER
      FROM fileddata AS t1
      JOIN (
        SELECT District,R_Constituency,PARLIAMENT, Max(Week) AS Max_week
        FROM fileddata
        GROUP BY District,R_Constituency,PARLIAMENT Order by Max_week DESC
      ) AS t2 ON t1.R_Constituency = t2.R_Constituency  AND t1.Week = t2.Max_week
      WHERE Party IS NOT NULL
      ${Gender ? `AND t1.Gender = '${Gender}'` : ''}
      ${Caste ? `AND t1.RCaste = '${Caste}'` : ''}
      ${age ? `AND t1.\`Age Group\` = '${age}'` : ''}
      ${District ? `AND t1.District = '${District}'` : ''}
      ${PARLIAMENT ? `AND t1.PARLIAMENT = '${PARLIAMENT}'` : ''}
      GROUP BY t1.PARLIAMENT
      ORDER BY t1.PARLIAMENT ASC;`; // Add the query for parliament here--------
      break;
    case 'RCaste':
        query = `SELECT
        t1.RCaste,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS YSRCP,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'TDP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS TDP,
        CONCAT(ROUND((((SUM(CASE WHEN Party = 'JSP' THEN Factor ELSE 0 END) + SUM(CASE WHEN Party = 'BJP' THEN Factor ELSE 0 END)) / SUM(Factor)) * 100)), '%') AS JSP_BJP,
        CONCAT(ROUND(((SUM(CASE WHEN Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS OTHER
    FROM (
        SELECT R_Constituency, RCaste, Week, Factor, Party
        FROM fileddata
         WHERE Party IS NOT NULL
          ${Gender ? `AND Gender = '${Gender}'` : ''}
          ${Caste ? `AND RCaste = '${Caste}'` : ''}
          ${age ? `AND \`Age Group\` = '${age}'` : ''}
          ${District ? `AND District = '${District}'` : ''}
          ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
    ) AS t1
    JOIN (
        SELECT R_Constituency, MAX(Week) AS Max_date
        FROM fileddata
         WHERE Party IS NOT NULL
          ${Gender ? `AND Gender = '${Gender}'` : ''}
          ${Caste ? `AND RCaste = '${Caste}'` : ''}
          ${age ? `AND \`Age Group\` = '${age}'` : ''}
          ${District ? `AND District = '${District}'` : ''}
          ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
        GROUP BY R_Constituency
    ) AS t2 ON t1.R_Constituency = t2.R_Constituency AND t1.Week = t2.Max_date
    GROUP BY t1.RCaste
    ORDER BY SUM(Factor) DESC;
    `; // Add the query for caste here
      // ${Caste && Caste.length ? `AND Caste IN (${Caste.map(c => `'${c}'`).join(', ')})` : ''}
      break;
    default:
      res.send('Invalid option');
      return;
  }

  try {
    const data = await db.sequelize.query(query, {
      type: db.sequelize.QueryTypes.SELECT,
      order: [[selectedOption, 'ASC']] // Replace 'column_name' with the name of the column you want to sort by
    });
    res.send(data);
    // res.render('overviewpage', { "data ":data});
    // res.send(data)
    console.log(data)
  
  } catch (error) {
    console.error(error);
    res.send("Error occurred while fetching data");
  }
}

const  Parliament =async(req, res, next)=>{

  const selectedDistrict = req.query.District;
  // const parliament = req.query.Parliament

  // console.log('district',selectedDistrict)
  try {
    const results = await db.sequelize.query(                            
      'SELECT DISTINCT PARLIAMENT FROM fileddata WHERE District = :district ORDER BY PARLIAMENT ASC;' ,
      {
        replacements: { district: selectedDistrict },
        type: sequelize.QueryTypes.SELECT
      }
    );

    const Parliaments = results.map(result => result.PARLIAMENT);
    // console.log(Parliaments)
    res.json(Parliaments);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error..' });
  }
}
const getCaste = async(req,res,next)=>{
  const selectedDistrict = req.query.District
  const parliament = req.query.parliament
  
  try {
    const results = await db.sequelize.query(
      'SELECT DISTINCT RCaste FROM fileddata WHERE District = :district AND PARLIAMENT = :parliament',
      {
        replacements: { district: selectedDistrict, parliament:parliament},
        type: sequelize.QueryTypes.SELECT
      }
    );

    const Caste = results.map(result => result.RCaste);
    console.log('CASTE---',Caste.length)
    res.send(Caste);
  } catch (error) { 
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
}


const TDPJSPAlliance = async (req, res, next) => {
  const {selectedOption,Gender,Caste,age,District,PARLIAMENT} = req.body;
  let query = '';


  // Build the query based on the selected option
  switch (selectedOption) {
   
      case 'District':
        query = `
          SELECT
            t1.District,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS YSRCP,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'Will Not Vote' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS \`Will Not Vote\`,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'TDP+JSP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS \`TDP+JSP\`
           
          FROM fileddata AS t1
          JOIN (
            SELECT District,R_Constituency, Max(Week) AS Max_week
            FROM fileddata
            GROUP BY R_Constituency,District
          ) AS t2 ON t1.R_Constituency = t2.R_Constituency AND t1.Week = t2.Max_week
          WHERE \`TDP+JSP Alliance\` IS NOT NULL
          AND Party IN ('TDP', 'JSP')
          ${Gender ? `AND t1.Gender = '${Gender}'` : ''}
          ${Caste ? `AND t1.RCaste = '${Caste}'` : ''}
          ${age ? `AND t1.\`Age Group\` = '${age}'` : ''}
          ${District ? `AND t1.District = '${District}'` : ''}
          ${PARLIAMENT ? `AND t1.PARLIAMENT = '${PARLIAMENT}'` : ''}
          GROUP BY t1.District
          ORDER BY 
      CASE 
        WHEN t1.District = 'SRIKAKULAM' THEN 1 
        WHEN t1.District = 'VIZIANAGARAM' THEN 2 
        WHEN t1.District = 'VISAKHAPATNAM' THEN 3
        WHEN t1.District = 'EAST GODAVARI' THEN 4 
        WHEN t1.District = 'WEST GODAVARI' THEN 5
        WHEN t1.District = 'KRISHNA' THEN 6 
        WHEN t1.District = 'GUNTUR' THEN 7
        WHEN t1.District = 'PRAKASAM' THEN 8 
        WHEN t1.District = 'NELLORE' THEN 9
        WHEN t1.District = 'KADAPA' THEN 10 
        WHEN t1.District = 'KURNOOL' THEN 11
        WHEN t1.District = 'CHITTOOR' THEN 12
        ELSE 13 
      END;
        `;// Add the query for districts here
      break;
    case 'PARLIAMENT':
        query = `SELECT
        t1.PARLIAMENT,
        CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS YSRCP,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'Will Not Vote' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS \`Will Not Vote\`,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'TDP+JSP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS \`TDP+JSP\`
            FROM (
              SELECT R_Constituency, PARLIAMENT, Week, Factor, \`TDP+JSP Alliance\`
              FROM fileddata
               WHERE \`TDP+JSP Alliance\` IS NOT NULL
               AND Party IN ('TDP', 'JSP')
                ${Gender ? `AND Gender = '${Gender}'` : ''}
                ${Caste ? `AND RCaste = '${Caste}'` : ''}
                ${age ? `AND \`Age Group\` = '${age}'` : ''}
                ${District ? `AND District = '${District}'` : ''}
                ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
          ) AS t1
          JOIN (
              SELECT R_Constituency, MAX(Week) AS Max_date
              FROM fileddata
               WHERE \`TDP+JSP Alliance\` IS NOT NULL
               AND Party IN ('TDP', 'JSP')
                ${Gender ? `AND Gender = '${Gender}'` : ''}
                ${Caste ? `AND RCaste = '${Caste}'` : ''}
                ${age ? `AND \`Age Group\` = '${age}'` : ''}
                ${District ? `AND District = '${District}'` : ''}
                ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
              GROUP BY R_Constituency
          ) AS t2 ON t1.R_Constituency = t2.R_Constituency AND t1.Week = t2.Max_date
          GROUP BY t1.PARLIAMENT
          ORDER BY PARLIAMENT ASC;`; // Add the query for parliament here--------
      break;
    case 'RCaste':
        query = `SELECT
        t1.RCaste,
        CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'YSRCP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS YSRCP,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'Will Not Vote' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS \`Will Not Vote\`,
            CONCAT(ROUND(((SUM(CASE WHEN \`TDP+JSP Alliance\` = 'TDP+JSP' THEN Factor ELSE 0 END) / SUM(Factor)) * 100)), '%') AS \`TDP+JSP\`
            FROM (
              SELECT R_Constituency, RCaste, Week, Factor, \`TDP+JSP Alliance\`
              FROM fileddata
               WHERE \`TDP+JSP Alliance\` IS NOT NULL
               AND Party IN ('TDP', 'JSP')
                ${Gender ? `AND Gender = '${Gender}'` : ''}
                ${Caste ? `AND RCaste = '${Caste}'` : ''}
                ${age ? `AND \`Age Group\` = '${age}'` : ''}
                ${District ? `AND District = '${District}'` : ''}
                ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
          ) AS t1
          JOIN (
              SELECT R_Constituency, MAX(Week) AS Max_date
              FROM fileddata
               WHERE \`TDP+JSP Alliance\` IS NOT NULL
               AND Party IN ('TDP', 'JSP')
                ${Gender ? `AND Gender = '${Gender}'` : ''}
                ${Caste ? `AND RCaste = '${Caste}'` : ''}
                ${age ? `AND \`Age Group\` = '${age}'` : ''}
                ${District ? `AND District = '${District}'` : ''}
                ${PARLIAMENT ? `AND PARLIAMENT = '${PARLIAMENT}'` : ''}
              GROUP BY R_Constituency
          ) AS t2 ON t1.R_Constituency = t2.R_Constituency AND t1.Week = t2.Max_date
          GROUP BY t1.RCaste
          ORDER BY SUM(Factor) DESC;`; // Add the query for caste here
      // ${Caste && Caste.length ? `AND Caste IN (${Caste.map(c => `'${c}'`).join(', ')})` : ''}
      break;
    default:
      res.send('Invalid option');
      return;
  }

  try {
    const data = await db.sequelize.query(query, {
      type: db.sequelize.QueryTypes.SELECT,
      order: [[selectedOption, 'DESC']] // Replace 'column_name' with the name of the column you want to sort by
    });
    res.send(data);
    // res.render('overviewpage', { "data ":data});
    // res.send(data)
    // console.log(data)
  
  } catch (error) {
    console.error(error);
    res.send("Error occurred while fetching data");
  }
}
const getDistCaste = async(req,res,next)=>{
  const selectedDistrict = req.query.District;
  // const parliament = req.query.parliament;
  
  try {
    let query = 'SELECT DISTINCT RCaste FROM fileddata WHERE District = :district';
    let replacements = { district: selectedDistrict };
    
   
    
    const results = await db.sequelize.query(query, {
      replacements,
      type: sequelize.QueryTypes.SELECT
    });

    const Caste = results.map(result => result.RCaste);
    console.log(Caste.length)
    res.send(Caste);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
}


module.exports = {
    DPC_data,
    Parliament,
    getCaste,
    TDPJSPAlliance,
    getDistCaste
  };




   CONCAT(ROUND(((SUM(CASE WHEN Party = 'YSRCP' AND t1.SET_F = 'Consider' THEN Factor ELSE 0 END) / SUM(CASE WHEN t1.SET_F = 'Consider' THEN Factor ELSE 0 END)) * 100),1), '%') AS YSRCP,
        CONCAT(ROUND(((SUM(CASE WHEN Party = 'TDP' AND t1.SET_F = 'Consider' THEN Factor ELSE 0 END) / SUM(CASE WHEN t1.SET_F = 'Consider' THEN Factor ELSE 0 END)) * 100),1), '%') AS TDP,
        CONCAT(ROUND((((SUM(CASE WHEN Party = 'JSP' AND t1.SET_F = 'Consider' THEN Factor ELSE 0 END) + SUM(CASE WHEN Party = 'BJP' AND t1.SET_F = 'Consider' THEN Factor ELSE 0 END)) / SUM(CASE WHEN t1.SET_F = 'Consider' THEN Factor ELSE 0 END)) * 100),1), '%') AS JSP_BJP,
        CONCAT(ROUND(((SUM(CASE WHEN Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') AND t1.SET_F = 'Consider' THEN Factor ELSE 0 END) / SUM(CASE WHEN t1.SET_F = 'Consider' THEN Factor ELSE 0 END)) * 100),1), '%') AS OTHER






const SummeryReport = async (req, res, next) => {
  try {
    const { district, constituency, Date } = req.body;

    if (!district || !constituency || !Date) {
      return res.status(400).json({ error: 'Missing district, constituency, or Date field in request body' });
    }

    const query = `
    WITH \`mandal_avgs\` AS (
      SELECT
          fileddata.Rev_Mandal AS MANDAL,
          CONCAT(FORMAT(AVG(resultdata.\`2019_YSRCP\`), 0), '%') AS '2019 YSRCP',
          CONCAT(FORMAT(AVG(resultdata.\`2019_TDP\`), 0), '%') AS '2019 TDP',
          CONCAT(FORMAT(AVG(resultdata.\`2019_JSP\`), 0), '%') AS '2019 JSP',
          CONCAT(FORMAT(AVG(resultdata.\`2014_YSRCP\`), 0), '%') AS '2014 YSRCP',
          CONCAT(FORMAT(AVG(resultdata.\`2014_TDP\`), 0), '%') AS '2014 TDP',
          CONCAT(FORMAT(AVG(resultdata.\`2014_Others\`), 0), '%') AS '2014 Others',
          CONCAT(FORMAT(SUM(CASE WHEN fileddata.Party = 'YSRCP' THEN fileddata.Factor ELSE 0 END) / SUM(fileddata.Factor) * 100, 0), '%') AS YSRCP,
          CONCAT(FORMAT(SUM(CASE WHEN fileddata.Party = 'TDP' THEN fileddata.Factor ELSE 0 END) / SUM(fileddata.Factor) * 100, 0), '%') AS TDP,
          CONCAT(ROUND((((SUM(CASE WHEN fileddata.Party = 'JSP' THEN fileddata.Factor ELSE 0 END) + SUM(CASE WHEN fileddata.Party = 'BJP' THEN fileddata.Factor ELSE 0 END)) / SUM(fileddata.Factor)) * 100)), '%') AS JSP_BJP,
          CONCAT(ROUND(((SUM(CASE WHEN fileddata.Party NOT IN ('TDP', 'YSRCP', 'JSP', 'BJP') THEN fileddata.Factor ELSE 0 END) / SUM(fileddata.Factor)) * 100)), '%') AS OTHER
  
      FROM resultdata
      LEFT JOIN fileddata ON resultdata.\`Mandal Name\` = fileddata.\`Rev_Mandal\`
      
      WHERE fileddata.District = :district
          AND fileddata.R_Constituency = :constituency
          AND fileddata.Date = :Date
          AND fileddata.Rev_Mandal IS NOT NULL -- Exclude the 'Total' row
      GROUP BY fileddata.Rev_Mandal
  )
  
  SELECT 
  IF(COUNT(*) = 0, 'No data available.', 'Total') AS MANDAL,
  CONCAT(FORMAT(AVG(\`2019 YSRCP\`), 0), '%') AS \`2019 YSRCP\`,
  CONCAT(FORMAT(AVG(\`2019 TDP\`), 0), '%') AS \`2019 TDP\`,
  CONCAT(FORMAT(AVG(\`2019 JSP\`), 0), '%') AS \`2019 JSP\`,
  CONCAT(FORMAT(AVG(\`2014 YSRCP\`), 0), '%') AS \`2014 YSRCP\`,
  CONCAT(FORMAT(AVG(\`2014 TDP\`), 0), '%') AS \`2014 TDP\`,
  CONCAT(FORMAT(AVG(\`2014 Others\`), 0), '%') AS \`2014 Others\`,
  CONCAT(FORMAT(AVG(YSRCP), 0), '%') AS YSRCP,
  CONCAT(FORMAT(AVG(TDP), 0), '%') AS TDP,
  CONCAT(FORMAT(AVG(JSP_BJP), 0), '%') AS JSP_BJP,
  CONCAT(FORMAT(AVG(OTHER), 0), '%') AS OTHER
FROM mandal_avgs
UNION ALL
SELECT 
  \`MANDAL\`,
  \`2019 YSRCP\`,
  \`2019 TDP\`,
  \`2019 JSP\`,
  \`2014 YSRCP\`,
  \`2014 TDP\`,
 \`2014 Others\`,
  YSRCP,
  TDP,
  JSP_BJP,
  OTHER
FROM mandal_avgs
ORDER BY \`MANDAL\`;

    `;

    const result = await db.sequelize.query(query, {
      replacements: { district, constituency, Date },
      type: sequelize.QueryTypes.SELECT,
    });

    if (!result) {
      return res.status(500).json({ error: 'Failed to retrieve data from the database' });
    }

    res.status(200).json(result);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing the request' });
  }
};



/* Media Query for tablets */
@media only screen and (max-width: 1180px) {
  .container {
    display: grid;
    grid-template-columns: 0.1fr;
    grid-template-areas:
      "parentele"
      "left-nav"
      "mainele";
    grid-gap: 1px;
  }
  #parentele {
    grid-area:"parentele";
  }
  .left-nav {
    grid-area: left-nav;
  }
  #mainele{
    grid-area: mainele;
  }
}

/* Media Query for mobile devices */
@media only screen and (max-width: 768px) {
  .container {
    display: block;
  }
  .parentele,
  .left-elem,
  .main-elem {
    width: 100%;
  }
  .left-elem {
    margin-top: 20px;
  }
}

/* Media Query for desktops */
@media only screen and (min-width: 1200px) {
  .container {
    display: grid;
    grid-template-columns: 20% 1fr;
    grid-template-areas: 
      "parentele leftelem"
      "parentele mainelem";
    grid-gap: 20px;
  }
  .parentele {
    grid-area: parentele;
  }
  .left-elem {
    grid-area: leftelem;
  }
  .main-elem {
    grid-area: mainelem;
  }
}
